{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","Notification","message","type","className","PhoneBookFilter","handleFilterChange","onChange","PhoneBookForm","addPerson","handleNameChange","handlePhoneChange","onSubmit","PersonDisplay","persons","filterValue","removePerson","filtered","filter","x","name","toUpperCase","indexOf","map","person","Person","number","onClick","App","useState","setPersons","newName","setNewName","newPhone","setNewPhone","newFilter","setFilterValue","setMessage","messageType","setMessageType","useEffect","personService","updatePerson","duplicatePerson","window","confirm","changedPerson","res","console","log","setTimeout","catch","error","filteredArray","concat","e","target","value","preventDefault","duplicate","find","p","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52ad3954.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl);\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n   const request = axios.post(baseUrl, newObject);\r\n   return request.then(response => response.data)\r\n}\r\n\r\nconst remove = id => {\r\n   const request = axios.delete(`${baseUrl}/${id}`);\r\n   return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request;\r\n  }\r\n\r\nexport default {\r\n    getAll,\r\n    create,\r\n    remove,\r\n    update\r\n}","import React, { useState, useEffect } from 'react'\r\nimport personService from './services/persons'\r\nimport './app.css'\r\n\r\nconst App = () => {\r\n    const [persons, setPersons] = useState([])\r\n\r\n    const [newName, setNewName] = useState('')\r\n    const [newPhone, setNewPhone] = useState('')\r\n    const [newFilter, setFilterValue] = useState('')\r\n    const [message, setMessage] = useState('')\r\n    const [messageType, setMessageType] = useState('')\r\n\r\n    const getData = () => {\r\n        personService\r\n            .getAll()\r\n            .then(response => {\r\n                setPersons(response)\r\n            })\r\n    }\r\n\r\n    useEffect(getData, []);\r\n\r\n    const addPerson = (e) => {\r\n        e.preventDefault();\r\n\r\n        const duplicate = persons.find(p => p.name === newName);\r\n\r\n        if (duplicate) {\r\n            updatePerson(duplicate);\r\n            return;\r\n        }\r\n\r\n        var newPerson = {\r\n            name: newName,\r\n            number: newPhone\r\n        }\r\n\r\n        personService\r\n            .create(newPerson)\r\n            .then(res => {\r\n                console.log(res)\r\n                setPersons(persons.concat(res));\r\n                setMessage(`Added ${res.name}`)\r\n                setMessageType(\"success\")\r\n                setTimeout(() => {\r\n                    setMessage(null)\r\n                }, 5000)\r\n            })\r\n            .catch(e => {\r\n                setMessage(`${e.response.data.error}`)\r\n                setMessageType(\"error\")\r\n            })\r\n    }\r\n\r\n    const updatePerson = (duplicatePerson) => {\r\n        const result = window.confirm(`${newName} is already added to phonebook, replace the \r\n                                       old number with a new one?`)\r\n        if (!result) {\r\n            return;\r\n        }\r\n\r\n        const changedPerson = { ...duplicatePerson, number: newPhone };\r\n\r\n        personService\r\n            .update(changedPerson.id, changedPerson)\r\n            .then(res => {\r\n                console.log(res)\r\n                setMessage(`Updated ${changedPerson.name}`)\r\n                setMessageType(\"success\")\r\n                setTimeout(() => {\r\n                    setMessage(null)\r\n                }, 5000)\r\n            })\r\n            .catch(error => {\r\n                console.log(\"Error\", error)\r\n                setMessage(`${changedPerson.name} has already been removed from server`)\r\n                setMessageType(\"error\")\r\n                setTimeout(() => {\r\n                    setMessage(null)\r\n                }, 5000)\r\n            }\r\n            );\r\n\r\n        const filteredArray = persons.filter(x => x.id !== changedPerson.id);\r\n        setPersons(filteredArray.concat(changedPerson));\r\n    }\r\n\r\n    const removePerson = (person) => {\r\n        const result = window.confirm(`Delete ${person.name}?`);\r\n\r\n        if (!result) {\r\n            return;\r\n        }\r\n\r\n        personService\r\n            .remove(person.id)\r\n            .then(res => {\r\n                setMessage(`Removed ${person.name}`)\r\n                setMessageType(\"success\")\r\n                setTimeout(() => {\r\n                    setMessage(null)\r\n                }, 5000)\r\n            });\r\n\r\n        setPersons(persons.filter(x => x.id !== person.id));\r\n    }\r\n\r\n    const handleNameChange = (e) => {\r\n        setNewName(e.target.value);\r\n    }\r\n\r\n    const handlePhoneChange = (e) => {\r\n        setNewPhone(e.target.value);\r\n    }\r\n\r\n    const handleFilterChange = (e) => {\r\n        setFilterValue(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Phonebook</h2>\r\n            <Notification message={message} type={messageType} />\r\n            <PhoneBookFilter handleFilterChange={handleFilterChange} />\r\n            <h2>Add new</h2>\r\n            <PhoneBookForm addPerson={addPerson} handleNameChange={handleNameChange} handlePhoneChange={handlePhoneChange} />\r\n            <h3>Numbers</h3>\r\n            <PersonDisplay persons={persons} filterValue={newFilter} removePerson={removePerson} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Notification = ({ message, type }) => {\r\n    if (!message) {\r\n        return null\r\n    }\r\n\r\n    const className = type === \"error\" ? \"error\" : \"success\";\r\n    return (\r\n        <div className={className}>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst PhoneBookFilter = ({ handleFilterChange }) => {\r\n    return (\r\n        <div>\r\n            Filter shown with\r\n            <input type=\"text\" onChange={handleFilterChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst PhoneBookForm = ({ addPerson, handleNameChange, handlePhoneChange }) => {\r\n    return (\r\n        <>\r\n            <form onSubmit={addPerson}>\r\n                <div>\r\n                    name: <input onChange={handleNameChange} />\r\n                </div>\r\n                <div>\r\n                    phone: <input onChange={handlePhoneChange} />\r\n                </div>\r\n                <div>\r\n                    <button type=\"submit\">add</button>\r\n                </div>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nconst PersonDisplay = ({ persons, filterValue, removePerson }) => {\r\n    const filtered = persons.filter(x => x.name.toUpperCase().indexOf(filterValue.toUpperCase()) !== -1);\r\n    return (\r\n        <div>\r\n            {filtered.map(x => (\r\n                <Person key={x.id} person={x} removePerson={removePerson} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\nconst Person = ({ person, removePerson }) => {\r\n    return (\r\n        <p>{person.name} {person.number}\r\n            <button onClick={() => removePerson(person)}>remove</button>\r\n        </p>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}